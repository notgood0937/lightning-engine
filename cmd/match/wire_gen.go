// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package match

import (
	"lightning-engine/internal/match"
	"lightning-engine/internal/server"
	"lightning-engine/internal/status"
	"lightning-engine/mq"
)

type App struct {
	status          *status.Status
	Server          *server.Server
	SysSignalHandle *status.SysSignalHandle
}

func newApp(st *status.Status, se *server.Server, ss *status.SysSignalHandle) *App {
	return &App{
		status:          st,
		Server:          se,
		SysSignalHandle: ss,
	}
}

// Injectors from wire.go:
func WireApp(pair []string) (*App, func(), error) {
	statusStatus := status.NewStatus()
	imq := mq.NewYourMq()
	matchPool, err := match.NewMatchPool(statusStatus, pair, imq)
	if err != nil {
		return nil, nil, err
	}
	serverServer := server.NewServer(statusStatus, matchPool)
	sysSignalHandle := status.NewSysSignalHandle(statusStatus)
	mainApp := newApp(statusStatus, serverServer, sysSignalHandle)
	return mainApp, func() {
	}, nil
}
